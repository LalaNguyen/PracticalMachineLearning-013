names(data)
strsplit(names(data),'[:digit:]')
strsplit(names(data),'\d+')
strsplit(names(data),'\w+')
strsplit(names(data),'[\w+]')
strsplit(names(data),'[digit]')
strsplit(names(data),'[:digit$]')
strsplit(names(data),'[w+]')
strsplit(names(data),'[d+]')
strsplit(names(data),'[d+$]')
strsplit(names(data),'\\d+')
a <- strsplit(names(data),'\\d+')
a
a[1]
a[3]
a[4]
a[111]
a[112]
a <- strsplit(names(data),'\\d+')
a
a <- strsplit(names(data))
a <- strsplit(names(data),"wgtp")
a
data <- read.csv(file = "Downloads/getdata_data_GDP.csv", sep =";", header = TRUE)
head(data
)
data <- read.csv(file = "Downloads/getdata_data_GDP.csv", sep =",", header = TRUE)
head(data)
dim(data)
data <- data[5:330,]
data
head(data)
mean(data$X.3)
avg <- data$X.3
avg
any(is.na(avg))
avg <- as.char(avg)
avg <- as.character(avg)
avg
avg <- avg[0:190] + avg[217]
remove <- c("..","")
avg %in% remove
avg[!avg %in% remove]
avg <- avg[!avg %in% remove]
avg <- as.numeric(avg)
avg
avg <- data$X.3
avg[!avg %in% remove]
avg <- as.character(avg)
avg
avg <- as.character(avg)
avg
avg
avg <- avg[!avg %in% remove]
avg
avg <- gsub(",","",avg)
avg
avg <- gsub(", ","",avg)
avg
avg <- gsub(" ","",avg)
avg
avg <- as.numeric(avg)
avg
mean(avg)
dtGDP <- data.table(read.csv(f, skip=4, nrows=215, stringsAsFactors=FALSE))
dtGDP <- data.table(read.csv(file = "Downloads/getdata_data_GDP.csv", skip=4, nrows=215, stringsAsFactors=FALSE))
dtGDP
dtGDP <- dtGDP[X != ""]
dtGDP <- dtGDP[, list(X, X.1, X.3, X.4)]
setnames(dtGDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
gdp <- as.numeric(gsub(",", "", dtGDP$gdp))
mean(gdp, na.rm=TRUE)
gdp
grep("^United", dtGDP$Long.Name)
dtGDP[1]
dtGDP[6]
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
f <- file.path(getwd(), "EDSTATS_Country.csv")
download.file(url, f)
dtEd <- data.table(read.csv(f))
dt <- merge(dtGDP, dtEd, all=TRUE, by=c("CountryCode"))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
f <- file.path(getwd(), "EDSTATS_Country.csv")
download.file(url, f, method = "curl")
dtEd <- data.table(read.csv(f))
dt <- merge(dtGDP, dtEd, all=TRUE, by=c("CountryCode"))
isFiscalYearEnd <- grepl("fiscal year end", tolower(dt$Special.Notes))
isJune <- grepl("june", tolower(dt$Special.Notes))
table(isFiscalYearEnd, isJune)
dt[isFiscalYearEnd & isJune, Special.Notes]
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
addmargins(table(year(sampleTimes), weekdays(sampleTimes)))
table(grepl("^2012",sampleTimes))
sampleTime_2012<-sampleTimes[grepl("^2012",sampleTimes)]
sampleTime_2012
sampleTime_2012_weekday<-weekdays(sampleTime_2012)
table(grepl("^2012",sampleTime_2012_weekday))
table(grepl("^Monday",sampleTime_2012_weekday))
formatdates <- format(sampleTimes, "%a %y")
values12 <- formatdates[grep("12", formatdates)] ## Subset on dates in 2012
valuesMonday12 <- values12[grep("Mon", values12)] ## Subset on Mondays
ans <- c(length(values12), length(valuesMonday12))
ans
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
plot(x~.,data = airmiles)
gplot(x~.,data = airmiles)
library(ggplot2)
gplot(x~.,data = airmiles)
qplot(x~.,data = airmiles)
qplot(x ~ .,data = airmiles)
ggplot(x ~ .,data = airmiles)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("caret")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(Hmisc()
)
names <- colnames(concrete)
names
names <- names[-length(names)]
names
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
ggplot(concrete, aes(Superplasticizer))+geom_point()
ggplot(data = training, aes(Superplasticizer))+geom_point()
ggplot(data = training, aes(x = Superplasticizer))+geom_point()
ggplot(data = training, aes(x = Superplasticizer))+geom_histogram()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.8)
preProc$rotation
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.9)
preProc$rotation
training$index <- seq(1, nrow(training))
require(reshape2)
D <- melt(training, id.var=c("index"))
ggplot(D, aes(x=index, y=value, color=variable)) +
geom_point(alpha=1/2) +
geom_smooth(alpha=1/2) +
facet_wrap(~ variable, nrow=3, scales="free_y") +
theme(legend.position="none")
data(faithful)
set.seed(333)
inTrain <- createDataPartition(y = faithful$waiting, p=0.5, list=FALSE)
str(inTrain()
)
str(inTrain)
dim(inTrain)
featurePlot(x = faithful$waiting,y = faithful$eruptions)
data(airquality)
View(airquality)
oz <- is.na(airquality$Ozone)
oz <- airquality$Ozone[oz]
oz
oz <- is.na(airquality$Ozone)
oz
oz <- airquality$Ozone[!oz]
oz
dim(oz)
str(oz)
x <- seq_along(d)
x <- seq_along(oz)
x
max <- 20
d1 <- split(d,ceiling(x/max))
d1 <- split(x,ceiling(x/max))
d1
oz
d1 <- split(oz,ceiling(oz/max))
d1
oz
d1 <- sample(oz,4, replace = FALSE)
d1
for (i in 50){}
for (i in 50){d1[i] <- sample(oz,4,replace = FALSE)}
for (i in 50){d1[i] <- sample(oz,5,replace = FALSE)}
d1[1] <- 1,1
d1[1] <- c(1,1)
type(d1)
class(d1)
d1
d <- NULL
for (i in 50){d[i] <- sample(oz,5,replace = FALSE)}
for (i in 50){d[i] <- mean(sample(oz,5,replace = FALSE))}
d
for (i in 50){d[i] <- mean(sample(oz, 5, replace = FALSE))}
d
for (i in 50){i}
d
d <- NULL
for (i in 50){ sample(oz, 5, replace = FALSE)}
for (i in 50){ a <- sample(oz, 5, replace = FALSE)
a}
a
a
for (i in 50){ a <- sample(oz, 5, replace = FALSE)
a}
a
for (i in 50){ d$i <- sample(oz, 5, replace = FALSE)}
d
d
for (i in 50){ d$'i' <- sample(oz, 5, replace = FALSE)}
d
d
d
d
d.i <-  NULL
for (i in 50){ d.i[i] <- sample(oz, 5, replace = FALSE)}
d.bar <-  NULL
for (i in 50){ d.bar[i] <- sample(oz, 5, replace = FALSE)}
d
d.bar
matrix
?matrix
mx <- matrix(1, nrow = 50, ncol =5)
mx
for (i in 50){ mx[i] <- sample(oz, 5, replace = FALSE)}
mx
mx[1]
mx[2]
mx[2,]
for (i in 50){ mx[i,] <- sample(oz, 5, replace = FALSE)}
mx
mx[1,]
mx[1,] < c(1,2,3,4,5)
mx[1,] <- c(1,2,3,4,5)
mx
for (i in 50){ mx[i,] <- sample(oz, 5, replace = FALSE)}
mx
i
i <- 0
for (i in 50){ mx[i,] <- sample(oz, 5, replace = FALSE)}
mx
i
for (i in 1:50){ mx[i,] <- sample(oz, 5, replace = FALSE)}
mx
for (i in 1:50){ mx[i] <- mean(mx[i])}
mx
for (i in 1:50){ mx[i,] <- sample(oz, 5, replace = FALSE)}
mx
mx
for (i in 1:50){ a[i] <- mean(mx[i])}
a
mean(mx[1])
mx[1]
for (i in 1:50){ a[i] <- mean(mx[i,])}
a
?hist
hist(a, breaks = "Sturges")
for (i in 1:50){ mx[i,] <- sample(oz, 10, replace = FALSE)}
mx <- matrix(1, nrow = 1000, ncol =10)
for (i in 1:50){ mx[i,] <- sample(oz, 10, replace = FALSE)}
for (i in 1:1000){ a[i] <- mean(mx[i,])}
for (i in 1:1000){ mx[i,] <- sample(oz, 10, replace = FALSE)}
for (i in 1:1000){ a[i] <- mean(mx[i,])}
hist(a, breaks = "Sturges")
mx <- matrix(1, nrow = 1000, ncol =20)
for (i in 1:1000){ mx[i,] <- sample(oz, 20, replace = FALSE)}
for (i in 1:1000){ a[i] <- mean(mx[i,])}
hist(a, breaks = "Sturges")
mx <- matrix(1, nrow = 1000, ncol =30)
for (i in 1:1000){ mx[i,] <- sample(oz, 30, replace = FALSE)}
for (i in 1:1000){ a[i] <- mean(mx[i,])}
hist(a, breaks = "Sturges")
data(father.son)
data(father)
library(UsingR)
data(father.son)
x <- father.son$sheight
hist(x)
?hist
?hist
hist(x)
d <- density(father.son$sheight)
d
hist(x, density = d)
hist(x, density = 2)
hist(x, density = 5)
hist(x, density = 10)
plot(density(x))
hist(x, density = 10)
hist(x, freq = FALSE)
qplot(x)
qplot(x,aes(x))
qplot(x, color = "blue")
qplot(x, color = "blue") + geom_smooth()
qplot(x, color = "blue") + geom_point()
qplot(x, color = "red")
qplot(x, color = red)
qplot(x, color = "#CCCCFF")
?qplot
qplot(x, color = cyl)
qplot(x, color = "cyl")
?qplot
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
1-3/36
deck
52
4/52
9
1/4*1/4*1/4*1/4
0
12/52
11/51
2/51
0.8*1.6
(0.8+1.6)/2
(0.8*1.6)/2
0.64
mypdf
mypdf(1.6)
integrate(mypdf, 0, 1.6)
1.424
1.414214
0.997*0.001
(1-0.997)*(1-0.001)
(1-0.985)*(1-0.001)
0.000997/(0.014985+(0.997*0.001))
sys_path <- "Development/R-studio/PracticalMachineLearning-013"
setwd(sys_path)
train_file <- "train.txt"
test_file <- "test.txt"
destTrainFile <- paste("data", train_file, sep = "/")
destTestFile <- paste("data", test_file, sep = "/")
# Retrieve the file
trainFileUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testFileUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
if(dir.create(path = "data")){
download.file(url = trainFileUrl, destfile = destTrainFile, method = "curl")
download.file(url = testFileUrl, destfile = destTestFile, method = "curl")
}
# Load up file and preprocessing
train <- read.csv(file = destTrainFile, header = TRUE, sep = ",", na.strings = c("NA","#DIV/0!", ""), stringsAsFactors = FALSE)
# Delete columns with all missing values
# 1. We find col that has total number of NA equals 0
select_col <- colSums(is.na(train)) == 0
# 2. Filter selected column.
train <- train[,select_col]
# 3. user_name, raw_timestamp_part_1, raw_timestamp_part_3
# cvtd_timestamp, new_window, num_window are not useful.
# Remove it
train <- train[,-c(1,6)]
str(train)
train <- train[,select_col]
train <- read.csv(file = destTrainFile, header = TRUE, sep = ",", na.strings = c("NA","#DIV/0!", ""), stringsAsFactors = FALSE)
# Delete columns with all missing values
# 1. We find col that has total number of NA equals 0
select_col <- colSums(is.na(train)) == 0
# 2. Filter selected column.
train <- train[,select_col]
# 3. user_name, raw_timestamp_part_1, raw_timestamp_part_3
# cvtd_timestamp, new_window, num_window are not useful.
# Remove it
train <- train[,-c(1:6)]
str(train)
train <- read.csv(file = destTrainFile, header = TRUE, sep = ",", na.strings = c("NA","#DIV/0!", ""), stringsAsFactors = FALSE)
select_col <- colSums(is.na(train)) == 0
# 2. Filter selected column.
train <- train[,select_col]
# 3. user_name, raw_timestamp_part_1, raw_timestamp_part_3
# cvtd_timestamp, new_window, num_window are not useful.
# Remove it
train <- train[,-c(1:7)]
str(train)
subset <- train [1:100,]
str(subset)
featurePlot(x = subset, y = as.factor(train$classe))
library(caret)
featurePlot(x = subset, y = as.factor(train$classe))
head(subset)
featurePlot(x = subset, y = as.factor(subset$classe))
featurePlot(x = subset[1:20,], y = as.factor(subset$classe))
featurePlot(x = subset[,1:2], y = as.factor(subset$classe))
featurePlot(x = subset[,1:5], y = as.factor(subset$classe))
featurePlot(x = subset[,1:6], y = as.factor(subset$classe))
featurePlot(x = subset[,1:9], y = as.factor(subset$classe))
tail(train)
featurePlot(x = train[,1], y = as.factor(train$classe))
names(train)
summary(train$roll_belt)
train <- train[,select_col]
train$classe <- as.factor(train$classe)
inTrain <- createDataPartition(y=trainingset$classe, p=0.60, list=FALSE)
inTrain <- createDataPartition(y = train$classe, p=0.60, list=FALSE)
train_set <- train[inTrain,]
test_set <- train[-inTrain,]
dim(train_set)
str(train_set)
hist(train_set)
hist(train_set$classe)
hist(as.numeric(train_set$classe))
hist(as.numeric(train_set$classe),labels = TRUE)
hist(as.numeric(train_set$classe),labels = TRUE ,freq=F)
hist(as.numeric(train_set$classe),labels = TRUE )
library(ggplot2)
ggplot(train, aes( x = classes)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
ggplot(train, aes( x = classe)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
geom_histogram(binwidth=.5, colour="green", fill="white")
ggplot(train, aes( x = classe)) +
geom_histogram(binwidth=.5, colour="green", fill="white")
geom_density(alpha=.2, fill="#FF6666")
ggplot(train, aes( x = classe)) +
geom_histogram(binwidth=.5, colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
0
0
ggplot(train, aes( x = classe)) +
geom_histogram(binwidth=.2, colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
ggplot(train, aes( x = classe)) +
geom_histogram(colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
ggplot(train, aes( x = classe)) +
geom_histogram(colour= cond)
ggplot(train, aes( x = classe, colour = cond)) +
geom_histogram()
ggplot(train, aes( x = classe, fill = cond)) +
geom_histogram()
ggplot(train, aes( x = classe, fill = classe)) +
geom_histogram()
geom_histogram( colour="black", fill="white")
ggplot(train, aes( x = classe)) +
geom_histogram( colour="black", fill="white")
geom_histogram( colour="black", fill="darkolivegreen3")
ggplot(train, aes( x = classe)) +
geom_histogram( colour="black", fill="darkolivegreen3")
geom_histogram( binwidth=1, colour="black", fill="darkolivegreen3")
ggplot(train, aes( x = classe)) +
geom_histogram( binwidth=1, colour="black", fill="darkolivegreen3")
ggplot(train, aes( x = classe)) +
geom_histogram( binwidth=3, colour="black", fill="darkolivegreen3")
ggplot(train, aes( x = classe)) +
geom_histogram( binwidth=0.1, colour="black", fill="darkolivegreen3")
ggplot(train, aes( x = classe)) +
geom_histogram( binwidth=0.1, colour="black", fill="darkolivegreen3")+
geom_density()
ggplot(train, aes( x = classe)) +
geom_histogram( binwidth= 0.5 , colour="black", fill="darkolivegreen3")+
geom_density()
ggplot(train) +
geom_histogram(  aes( x = classe),binwidth= 0.5 , colour="black", fill="darkolivegreen3")+
geom_density()
ggplot(train, aes( x = pitch_belt)) +
geom_histogram( binwidth= 0.5 , colour="black", fill="darkolivegreen3")+
geom_density()
ggplot(train, aes( x = classe)) +
geom_histogram( binwidth= 0.5 , colour="black", fill="darkolivegreen3")+
geom_density()
ggplot(train, aes( x = classe)) +
geom_histogram( binwidth= 0.5 , colour="black", fill="darkolivegreen3")
x
ggplot(train, aes( x = classe)) +
geom_histogram( binwidth= 0.5 , colour="black", fill=..count..)
ggplot(train, aes( x = classe)) +
geom_histogram( aes(binwidth= 0.5 , colour="black", fill=..count..))
ggplot(train, aes( x = classe),binwidth= 0.5) +
geom_histogram( aes( colour="black", fill=..count..))
ggplot(train, aes( x = classe),binwidth= 0.1) +
geom_histogram( aes( colour="black", fill=..count..))
ggplot(train, aes( x = classe),binwidth= 0.1) +
geom_histogram( aes(fill=..count..))
ggplot(train, aes( x = classe)) +
geom_histogram( aes(fill=..count..),binwidth= 0.1)
ggplot(train, aes( x = classe)) +
geom_histogram( aes(fill=..count..), binwidth= 12)
ggplot(train, aes( x = classe)) +
geom_histogram( aes(fill=..count..), binwidth= 1)
ggplot(train, aes( x = classe)) +
geom_histogram( aes(fill=..count..))
modFit <- train(classe~.,method = "rpart", data = train_set)
install.packages("e1071")
